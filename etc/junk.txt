  async parseJSON(inputString) {
    try {
      const data = JSON.parse(inputString)

      this.clearInstruments()
      this.clearPatterns()

      this.name = data.name
      this.tempo = data.tempo
      this.song = data.song

      let instNum = 0
      for (const instData of data.instruments) {
        const sampBuff = await loadSampleURL(instData.file)

        const name = instData.file.substring(instData.file.lastIndexOf('/') + 1)
        const inst = new Instrument(instNum++, name.replace('.wav', ''))
        const samp = new Sample(0, name)
        samp.buffer = sampBuff
        inst.samples[0] = samp
        inst.rootNote = instData.root

        this.instruments[inst.number] = inst
      }

      let pattNum = 0
      for (const pattData of data.patterns) {
        const patt = this.patterns[pattNum++]
        patt.length = pattData.length

        // TODO: REOMVE! fake stuff for testing
        for (let i = 0; i < patt.length; i += 4) {
          patt.steps[0][i] = new Step(0, 60, 64)
        }
        for (let i = 0; i < patt.length; i += 5) {
          patt.steps[0][i] = new Step(0, 60, 64)
        }
        for (let i = 4; i < patt.length; i += 8) {
          patt.steps[1][i] = new Step(1, 60, 64)
        }
        for (let i = 0; i < patt.length; i++) {
          patt.steps[2][i] = new Step(2, 60, Math.floor(Math.random() * 12 + 6))
        }
        for (let i = 0; i < patt.length; i += 12) {
          patt.steps[3][i] = new Step(3, 36 + pattNum * 7, 64)
        }

        // for (const stepData of pattData.steps) {
        //   const trackNum = stepData[0]
        //   const stepNum = stepData[1]
        //   const inst = stepData[2]

        //   patt.steps[trackNum][stepNum] = new Step(inst, stepData[3], stepData[4])
        // }
      }

      // Set start pattern
      this.activePattern = this.patterns[0]
    } catch (err) {
      console.error(err)
    }
  }